When would you want to use a remote repository rather than keeping all your work local?

sometimes when you mess up local changes, a remote repository can be used as a backup so that you always can revert
your version back to a previous one in the case of a catastrophic error. This is important when constanly checking
and revising work. 



Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Manual pull changes will add functions you created on GIT to your local machine. IF you were working with fixing a bug
in a previous version of the file, you would need to stay in the previous version instead of an automaticallly updated 
newer version. 



Describe the differences between forks, clones, and branches. When would you use one instead of another?

forks are used in the GitHub browser to create a copy of the repository for you to clone and use. CLone brings 
a repository from git to a local computer. Branches are used to try out a new feature or functions and create
a version of the program that goes a different route. 



What is the benefit of having a copy of the last known state of the remote stored locally?

By having the last known state of the remote stored locally, we can be aware of where the remote is at, and update
our local branch to merge and match that of the remote one if need be. This way we can also solve conflicts and 
merge branches to master and master/origin. 




How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without GitHub I would collaborate with others by manually keeping track of who is working on what and at 
what point they are in development. Clearly this would be a long and tedious process, and it would be 
annoying to keep up with. The manual process would be much harder. 




When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It is beneficial to make changes in a separate branch rather than directly in master when we want to test out new functions
or features of something that might jeopardize the master branch if incorrectly implemented. In this case we benefit by woriking
in a separate branch by testing out a scenario, but at the price of having to go through the trouble of merging and pulling
the new branch constantly. 